[{"path":"https://kisungyou.com/T4transport/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 T4transport authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kisungyou.com/T4transport/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kisung . Author, maintainer.","code":""},{"path":"https://kisungyou.com/T4transport/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"K (2025). T4transport: Tools Computational Optimal Transport. R package version 0.1.3, https://kisungyou.com/T4transport.","code":"@Manual{,   title = {T4transport: Tools for Computational Optimal Transport},   author = {Kisung You},   year = {2025},   note = {R package version 0.1.3},   url = {https://kisungyou.com/T4transport}, }"},{"path":"https://kisungyou.com/T4transport/index.html","id":"tools-for-computational-optimal-transport-in-r-","dir":"","previous_headings":"","what":"Tools for Computational Optimal Transport","title":"Tools for Computational Optimal Transport","text":"introduce T4transport, R package designed computational toolkit compiles collection algorithms field optimal transport.","code":""},{"path":"https://kisungyou.com/T4transport/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Computational Optimal Transport","text":"Option 1 : released version CRAN. Option 2 : development version GitHub.","code":"install.packages(\"T4transport\") # install.packages(\"devtools\") devtools::install_github(\"kisungyou/T4transport\")"},{"path":"https://kisungyou.com/T4transport/reference/bary14C.html","id":null,"dir":"Reference","previous_headings":"","what":"Barycenter by Cuturi & Doucet (2014) — bary14C","title":"Barycenter by Cuturi & Doucet (2014) — bary14C","text":"Given \\(K\\) empirical measures \\(\\mu_1, \\mu_2, \\ldots, \\mu_K\\) possibly different cardinalities, wasserstein barycenter \\(\\mu^*\\) solution following problem $$\\sum_{k=1}^K \\pi_k \\mathcal{W}_p^p (\\mu, \\mu_k)$$ \\(\\pi_k\\)'s relative weights empirical measures. assume either (1) support atoms Euclidean space given, (2) pairwise distances atoms fixed support empirical measures given. Algorithmically, subgradient method subgradient approximated using entropic regularization.","code":""},{"path":"https://kisungyou.com/T4transport/reference/bary14C.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barycenter by Cuturi & Doucet (2014) — bary14C","text":"","code":"bary14C(   support,   atoms,   marginals = NULL,   weights = NULL,   lambda = 0.1,   p = 2,   ... )  bary14Cdist(   distances,   marginals = NULL,   weights = NULL,   lambda = 0.1,   p = 2,   ... )"},{"path":"https://kisungyou.com/T4transport/reference/bary14C.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barycenter by Cuturi & Doucet (2014) — bary14C","text":"support \\((N\\times P)\\) matrix rows atoms fixed support. atoms length-\\(K\\) list element \\((N_k \\times P)\\) matrix atoms. marginals marginal distribution empirical measures; NULL (default), uniform weights set measures. Otherwise, length-\\(K\\) list element length-\\(N_i\\) vector nonnegative weights sum 1. weights weights individual measure; NULL (default), measure considered equally. Otherwise, length-\\(K\\) vector. lambda regularization parameter (default: 0.1). p exponent order distance (default: 2). ... extra parameters including abstol stopping criterion iterations (default: 1e-10). init.vec initial vector (default: uniform weight). maxiter maximum number iterations (default: 496). print.progress logical show current iteration (default: FALSE). distances length-\\(K\\) list element \\((N\\times N_k)\\) pairwise distance atoms fixed support given measures.","code":""},{"path":"https://kisungyou.com/T4transport/reference/bary14C.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barycenter by Cuturi & Doucet (2014) — bary14C","text":"length-\\(N\\) vector probability vector.","code":""},{"path":"https://kisungyou.com/T4transport/reference/bary14C.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Barycenter by Cuturi & Doucet (2014) — bary14C","text":"Cuturi M, Doucet (2014). “Fast computation wasserstein barycenters.” Xing EP, Jebara T (eds.), Proceedings 31st international conference international conference machine learning - volume 32, volume 32 Proceedings machine learning research, 685–693.","code":""},{"path":"https://kisungyou.com/T4transport/reference/bary14C.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barycenter by Cuturi & Doucet (2014) — bary14C","text":"","code":"#------------------------------------------------------------------- #     Wasserstein Barycenter for Fixed Atoms with Two Gaussians # # * class 1 : samples from Gaussian with mean=(-4, -4) # * class 2 : samples from Gaussian with mean=(+4, +4) # * target support consists of 7 integer points from -6 to 6, #   where ideally, weight is concentrated near 0 since it's average! #------------------------------------------------------------------- ## GENERATE DATA #  Empirical Measures set.seed(100) ndat = 100 dat1 = matrix(rnorm(ndat*2, mean=-4, sd=0.5),ncol=2) dat2 = matrix(rnorm(ndat*2, mean=+4, sd=0.5),ncol=2)   myatoms = list() myatoms[[1]] = dat1 myatoms[[2]] = dat2 mydata = rbind(dat1, dat2)  #  Fixed Support support = cbind(seq(from=-8,to=8,by=2),                 seq(from=-8,to=8,by=2)) ## COMPUTE comp1 = bary14C(support, myatoms, lambda=0.5, maxiter=10) comp2 = bary14C(support, myatoms, lambda=1,   maxiter=10) comp3 = bary14C(support, myatoms, lambda=5,   maxiter=10)  ## VISUALIZE opar <- par(no.readonly=TRUE) par(mfrow=c(1,3)) barplot(comp1, main=\"lambda=0.5\") barplot(comp2, main=\"lambda=1\") barplot(comp3, main=\"lambda=5\")  par(opar)"},{"path":"https://kisungyou.com/T4transport/reference/bary15B.html","id":null,"dir":"Reference","previous_headings":"","what":"Barycenter by Benamou et al. (2015) — bary15B","title":"Barycenter by Benamou et al. (2015) — bary15B","text":"Given \\(K\\) empirical measures \\(\\mu_1, \\mu_2, \\ldots, \\mu_K\\) possibly different cardinalities, wasserstein barycenter \\(\\mu^*\\) solution following problem $$\\sum_{k=1}^K \\pi_k \\mathcal{W}_p^p (\\mu, \\mu_k)$$ \\(\\pi_k\\)'s relative weights empirical measures. assume either (1) support atoms Euclidean space given, (2) pairwise distances atoms fixed support empirical measures given. Authors proposed iterative Bregman projections conjunction entropic regularization.","code":""},{"path":"https://kisungyou.com/T4transport/reference/bary15B.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barycenter by Benamou et al. (2015) — bary15B","text":"","code":"bary15B(   support,   atoms,   marginals = NULL,   weights = NULL,   lambda = 0.1,   p = 2,   ... )  bary15Bdist(   distances,   marginals = NULL,   weights = NULL,   lambda = 0.1,   p = 2,   ... )"},{"path":"https://kisungyou.com/T4transport/reference/bary15B.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barycenter by Benamou et al. (2015) — bary15B","text":"support \\((N\\times P)\\) matrix rows atoms fixed support. atoms length-\\(K\\) list element \\((N_k \\times P)\\) matrix atoms. marginals marginal distribution empirical measures; NULL (default), uniform weights set measures. Otherwise, length-\\(K\\) list element length-\\(N_i\\) vector nonnegative weights sum 1. weights weights individual measure; NULL (default), measure considered equally. Otherwise, length-\\(K\\) vector. lambda regularization parameter (default: 0.1). p exponent order distance (default: 2). ... extra parameters including abstol stopping criterion iterations (default: 1e-10). init.vec initial vector (default: uniform weight). maxiter maximum number iterations (default: 496). print.progress logical show current iteration (default: FALSE). distances length-\\(K\\) list element \\((N\\times N_k)\\) pairwise distance atoms fixed support given measures.","code":""},{"path":"https://kisungyou.com/T4transport/reference/bary15B.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barycenter by Benamou et al. (2015) — bary15B","text":"length-\\(N\\) vector probability vector.","code":""},{"path":"https://kisungyou.com/T4transport/reference/bary15B.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Barycenter by Benamou et al. (2015) — bary15B","text":"Benamou J, Carlier G, Cuturi M, Nenna L, Peyré G (2015). “Iterative Bregman Projections Regularized Transportation Problems.” SIAM Journal Scientific Computing, 37(2), A1111–A1138. ISSN 1064-8275, 1095-7197.","code":""},{"path":"https://kisungyou.com/T4transport/reference/bary15B.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barycenter by Benamou et al. (2015) — bary15B","text":"","code":"#------------------------------------------------------------------- #     Wasserstein Barycenter for Fixed Atoms with Two Gaussians # # * class 1 : samples from Gaussian with mean=(-4, -4) # * class 2 : samples from Gaussian with mean=(+4, +4) # * target support consists of 7 integer points from -6 to 6, #   where ideally, weight is concentrated near 0 since it's average! #------------------------------------------------------------------- ## GENERATE DATA #  Empirical Measures set.seed(100) ndat = 500 dat1 = matrix(rnorm(ndat*2, mean=-4, sd=0.5),ncol=2) dat2 = matrix(rnorm(ndat*2, mean=+4, sd=0.5),ncol=2)   myatoms = list() myatoms[[1]] = dat1 myatoms[[2]] = dat2 mydata = rbind(dat1, dat2)  #  Fixed Support support = cbind(seq(from=-8,to=8,by=2),                 seq(from=-8,to=8,by=2)) ## COMPUTE comp1 = bary15B(support, myatoms, lambda=0.5, maxiter=10) comp2 = bary15B(support, myatoms, lambda=1,   maxiter=10) comp3 = bary15B(support, myatoms, lambda=5,   maxiter=10)  ## VISUALIZE opar <- par(no.readonly=TRUE) par(mfrow=c(1,3)) barplot(comp1, main=\"lambda=0.5\") barplot(comp2, main=\"lambda=1\") barplot(comp3, main=\"lambda=5\")  par(opar)"},{"path":"https://kisungyou.com/T4transport/reference/digit3.html","id":null,"dir":"Reference","previous_headings":"","what":"MNIST Images of Digit 3 — digit3","title":"MNIST Images of Digit 3 — digit3","text":"digit3 contains 2000 images famous MNIST dataset digit 3. element list image represented \\((28\\times 28)\\) matrix sums 1. normalization conventional hurt visualization via basic `image()` function.","code":""},{"path":"https://kisungyou.com/T4transport/reference/digit3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MNIST Images of Digit 3 — digit3","text":"","code":"data(digit3)"},{"path":"https://kisungyou.com/T4transport/reference/digit3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"MNIST Images of Digit 3 — digit3","text":"length-\\(2000\\) named list \"digit3\" \\((28\\times 28)\\) matrices.","code":""},{"path":"https://kisungyou.com/T4transport/reference/digit3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MNIST Images of Digit 3 — digit3","text":"","code":"## LOAD THE DATA data(digit3)  ## SHOW A FEW opar <- par(no.readonly=TRUE) par(mfrow=c(2,4), pty=\"s\") for (i in 1:8){   image(digit3[[i]]) }  par(opar)"},{"path":"https://kisungyou.com/T4transport/reference/digits.html","id":null,"dir":"Reference","previous_headings":"","what":"MNIST Images of All Digits — digits","title":"MNIST Images of All Digits — digits","text":"digits contains 5000 images famous MNIST dataset digits, consisting 500 images per digit class 0 9. digit image represented \\((28\\times 28)\\) matrix sums 1. normalization conventional hurt visualization via basic `image()` function.","code":""},{"path":"https://kisungyou.com/T4transport/reference/digits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MNIST Images of All Digits — digits","text":"","code":"data(digits)"},{"path":"https://kisungyou.com/T4transport/reference/digits.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"MNIST Images of All Digits — digits","text":"named list \"digits\" containing image length-5000 list \\((28\\times 28)\\) image matrices. label length-5000 vector class labels 0 9.","code":""},{"path":"https://kisungyou.com/T4transport/reference/digits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MNIST Images of All Digits — digits","text":"","code":"## LOAD THE DATA data(digits)  ## SHOW A FEW #  Select 9 random images subimgs = digits$image[sample(1:5000, 9)]  opar <- par(no.readonly=TRUE) par(mfrow=c(3,3), pty=\"s\") for (i in 1:9){   image(subimgs[[i]]) }  par(opar)"},{"path":"https://kisungyou.com/T4transport/reference/ecdfbary.html","id":null,"dir":"Reference","previous_headings":"","what":"Barycenter of Empirical CDFs — ecdfbary","title":"Barycenter of Empirical CDFs — ecdfbary","text":"Given collection empirical cumulative distribution functions \\(F^(x)\\) \\(=1,\\ldots,N\\), compute Wasserstein barycenter order 2. obtained taking weighted average set corresponding quantile functions.","code":""},{"path":"https://kisungyou.com/T4transport/reference/ecdfbary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barycenter of Empirical CDFs — ecdfbary","text":"","code":"ecdfbary(ecdfs, weights = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/ecdfbary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barycenter of Empirical CDFs — ecdfbary","text":"ecdfs length-\\(N\\) list \"ecdf\" objects [stats::ecdf()]. weights weight image; NULL (default), uniform weight set. Otherwise, length-\\(N\\) vector nonnegative weights. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). maxiter maximum number iterations (default: 496).","code":""},{"path":"https://kisungyou.com/T4transport/reference/ecdfbary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barycenter of Empirical CDFs — ecdfbary","text":"\"ecdf\" object Wasserstein barycenter.","code":""},{"path":"https://kisungyou.com/T4transport/reference/ecdfbary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barycenter of Empirical CDFs — ecdfbary","text":"","code":"#---------------------------------------------------------------------- #                         Two Gaussians # # Two Gaussian distributions are parametrized as follows. # Type 1 : (mean, var) = (-4, 1/4) # Type 2 : (mean, var) = (+4, 1/4) #---------------------------------------------------------------------- # GENERATE ECDFs ecdf_list = list() ecdf_list[[1]] = stats::ecdf(stats::rnorm(200, mean=-4, sd=0.5)) ecdf_list[[2]] = stats::ecdf(stats::rnorm(200, mean=+4, sd=0.5))  # COMPUTE THE BARYCENTER OF EQUAL WEIGHTS emean = ecdfbary(ecdf_list)  # QUANTITIES FOR PLOTTING x_grid  = seq(from=-8, to=8, length.out=100) y_type1 = ecdf_list[[1]](x_grid) y_type2 = ecdf_list[[2]](x_grid) y_bary  = emean(x_grid)  # VISUALIZE opar <- par(no.readonly=TRUE) plot(x_grid, y_bary, lwd=3, col=\"red\", type=\"l\",      main=\"Barycenter\", xlab=\"x\", ylab=\"Fn(x)\") lines(x_grid, y_type1, col=\"gray50\", lty=3) lines(x_grid, y_type2, col=\"gray50\", lty=3)  par(opar)"},{"path":"https://kisungyou.com/T4transport/reference/ecdfmed.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserstein Median of Empirical CDFs — ecdfmed","title":"Wasserstein Median of Empirical CDFs — ecdfmed","text":"Given collection empirical cumulative distribution functions \\(F^(x)\\) \\(=1,\\ldots,N\\), compute Wasserstein median. obtained functional variant Weiszfeld algorithm set quantile functions.","code":""},{"path":"https://kisungyou.com/T4transport/reference/ecdfmed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserstein Median of Empirical CDFs — ecdfmed","text":"","code":"ecdfmed(ecdfs, weights = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/ecdfmed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserstein Median of Empirical CDFs — ecdfmed","text":"ecdfs length-\\(N\\) list \"ecdf\" objects [stats::ecdf()]. weights weight image; NULL (default), uniform weight set. Otherwise, length-\\(N\\) vector nonnegative weights. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). maxiter maximum number iterations (default: 496).","code":""},{"path":"https://kisungyou.com/T4transport/reference/ecdfmed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserstein Median of Empirical CDFs — ecdfmed","text":"\"ecdf\" object Wasserstein median.","code":""},{"path":"https://kisungyou.com/T4transport/reference/ecdfmed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserstein Median of Empirical CDFs — ecdfmed","text":"","code":"# \\donttest{ #---------------------------------------------------------------------- #                         Tree Gaussians # # Three Gaussian distributions are parametrized as follows. # Type 1 : (mean, sd) = (-4, 1) # Type 2 : (mean, sd) = ( 0, 1/5) # Type 3 : (mean, sd) = (+6, 1/2) #---------------------------------------------------------------------- # GENERATE ECDFs ecdf_list = list() ecdf_list[[1]] = stats::ecdf(stats::rnorm(200, mean=-4, sd=1)) ecdf_list[[2]] = stats::ecdf(stats::rnorm(200, mean=+4, sd=0.2)) ecdf_list[[3]] = stats::ecdf(stats::rnorm(200, mean=+6, sd=0.5))  # COMPUTE THE MEDIAN emeds = ecdfmed(ecdf_list)  # COMPUTE THE BARYCENTER emean = ecdfbary(ecdf_list)  # QUANTITIES FOR PLOTTING x_grid  = seq(from=-8, to=10, length.out=500) y_type1 = ecdf_list[[1]](x_grid) y_type2 = ecdf_list[[2]](x_grid) y_type3 = ecdf_list[[3]](x_grid)  y_bary = emean(x_grid) y_meds = emeds(x_grid)  # VISUALIZE opar <- par(no.readonly=TRUE) plot(x_grid, y_bary, lwd=3, col=\"orange\", type=\"l\",      main=\"Wasserstein Median & Barycenter\",       xlab=\"x\", ylab=\"Fn(x)\", lty=2) lines(x_grid, y_meds, lwd=3, col=\"blue\", lty=2) lines(x_grid, y_type1, col=\"gray50\", lty=3) lines(x_grid, y_type2, col=\"gray50\", lty=3) lines(x_grid, y_type3, col=\"gray50\", lty=3) legend(\"topleft\", legend=c(\"Median\",\"Barycenter\"),         lwd=3, lty=2, col=c(\"blue\",\"orange\"))  par(opar) # }"},{"path":"https://kisungyou.com/T4transport/reference/fbary14C.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixed-Support Barycenter by Cuturi & Doucet (2014) — fbary14C","title":"Fixed-Support Barycenter by Cuturi & Doucet (2014) — fbary14C","text":"Given \\(K\\) empirical measures \\(\\mu_1, \\mu_2, \\ldots, \\mu_K\\) possibly different cardinalities, wasserstein barycenter \\(\\mu^*\\) solution following problem $$\\sum_{k=1}^K \\pi_k \\mathcal{W}_p^p (\\mu, \\mu_k)$$ \\(\\pi_k\\)'s relative weights empirical measures. assume either (1) support atoms Euclidean space given, (2) pairwise distances atoms fixed support empirical measures given. Algorithmically, subgradient method subgradient approximated using entropic regularization.","code":""},{"path":"https://kisungyou.com/T4transport/reference/fbary14C.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixed-Support Barycenter by Cuturi & Doucet (2014) — fbary14C","text":"","code":"fbary14C(   support,   atoms,   marginals = NULL,   weights = NULL,   lambda = 0.1,   p = 2,   ... )  fbary14Cdist(   distances,   marginals = NULL,   weights = NULL,   lambda = 0.1,   p = 2,   ... )"},{"path":"https://kisungyou.com/T4transport/reference/fbary14C.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixed-Support Barycenter by Cuturi & Doucet (2014) — fbary14C","text":"support \\((N\\times P)\\) matrix rows atoms fixed support. atoms length-\\(K\\) list element \\((N_k \\times P)\\) matrix atoms. marginals marginal distribution empirical measures; NULL (default), uniform weights set measures. Otherwise, length-\\(K\\) list element length-\\(N_i\\) vector nonnegative weights sum 1. weights weights individual measure; NULL (default), measure considered equally. Otherwise, length-\\(K\\) vector. lambda regularization parameter (default: 0.1). p exponent order distance (default: 2). ... extra parameters including abstol stopping criterion iterations (default: 1e-10). init.vec initial vector (default: uniform weight). maxiter maximum number iterations (default: 496). print.progress logical show current iteration (default: FALSE). distances length-\\(K\\) list element \\((N\\times N_k)\\) pairwise distance atoms fixed support given measures.","code":""},{"path":"https://kisungyou.com/T4transport/reference/fbary14C.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fixed-Support Barycenter by Cuturi & Doucet (2014) — fbary14C","text":"length-\\(N\\) vector probability vector.","code":""},{"path":"https://kisungyou.com/T4transport/reference/fbary14C.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fixed-Support Barycenter by Cuturi & Doucet (2014) — fbary14C","text":"Cuturi M, Doucet (2014-06-22/2014-06-24). “Fast Computation Wasserstein Barycenters.” Xing EP, Jebara T (eds.), Proceedings 31st International Conference Machine Learning, volume 32 Proceedings Machine Learning Research, 685–693.","code":""},{"path":"https://kisungyou.com/T4transport/reference/fbary14C.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fixed-Support Barycenter by Cuturi & Doucet (2014) — fbary14C","text":"","code":"# \\donttest{ #------------------------------------------------------------------- #     Wasserstein Barycenter for Fixed Atoms with Two Gaussians # # * class 1 : samples from Gaussian with mean=(-4, -4) # * class 2 : samples from Gaussian with mean=(+4, +4) # * target support consists of 7 integer points from -6 to 6, #   where ideally, weight is concentrated near 0 since it's average! #------------------------------------------------------------------- ## GENERATE DATA #  Empirical Measures set.seed(100) ndat = 100 dat1 = matrix(rnorm(ndat*2, mean=-4, sd=0.5),ncol=2) dat2 = matrix(rnorm(ndat*2, mean=+4, sd=0.5),ncol=2)   myatoms = list() myatoms[[1]] = dat1 myatoms[[2]] = dat2 mydata = rbind(dat1, dat2)  #  Fixed Support support = cbind(seq(from=-8,to=8,by=2),                 seq(from=-8,to=8,by=2)) ## COMPUTE comp1 = fbary14C(support, myatoms, lambda=0.1, maxiter=10) #> Error: * barysinkhorn14 : lambda is too small, causing underflow in exp(-C/lambda). comp2 = fbary14C(support, myatoms, lambda=1,   maxiter=10) comp3 = fbary14C(support, myatoms, lambda=10,  maxiter=10)  ## VISUALIZE opar <- par(no.readonly=TRUE) par(mfrow=c(1,3), pty=\"s\") barplot(comp1, ylim=c(0,1), main=\"Probability\\n (lambda=0.1)\") #> Error: object 'comp1' not found barplot(comp2, ylim=c(0,1), main=\"Probability\\n (lambda=1)\") barplot(comp3, ylim=c(0,1), main=\"Probability\\n (lambda=10)\") par(opar)  # }"},{"path":"https://kisungyou.com/T4transport/reference/fbary15B.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixed-Support Barycenter by Benamou et al. (2015) — fbary15B","title":"Fixed-Support Barycenter by Benamou et al. (2015) — fbary15B","text":"Given \\(K\\) empirical measures \\(\\mu_1, \\mu_2, \\ldots, \\mu_K\\) possibly different cardinalities, wasserstein barycenter \\(\\mu^*\\) solution following problem $$\\sum_{k=1}^K \\pi_k \\mathcal{W}_p^p (\\mu, \\mu_k)$$ \\(\\pi_k\\)'s relative weights empirical measures. assume either (1) support atoms Euclidean space given, (2) pairwise distances atoms fixed support empirical measures given. Authors proposed iterative Bregman projections conjunction entropic regularization.","code":""},{"path":"https://kisungyou.com/T4transport/reference/fbary15B.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixed-Support Barycenter by Benamou et al. (2015) — fbary15B","text":"","code":"fbary15B(   support,   atoms,   marginals = NULL,   weights = NULL,   lambda = 0.1,   p = 2,   ... )  fbary15Bdist(   distances,   marginals = NULL,   weights = NULL,   lambda = 0.1,   p = 2,   ... )"},{"path":"https://kisungyou.com/T4transport/reference/fbary15B.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixed-Support Barycenter by Benamou et al. (2015) — fbary15B","text":"support \\((N\\times P)\\) matrix rows atoms fixed support. atoms length-\\(K\\) list element \\((N_k \\times P)\\) matrix atoms. marginals marginal distribution empirical measures; NULL (default), uniform weights set measures. Otherwise, length-\\(K\\) list element length-\\(N_i\\) vector nonnegative weights sum 1. weights weights individual measure; NULL (default), measure considered equally. Otherwise, length-\\(K\\) vector. lambda regularization parameter (default: 0.1). p exponent order distance (default: 2). ... extra parameters including abstol stopping criterion iterations (default: 1e-10). init.vec initial vector (default: uniform weight). maxiter maximum number iterations (default: 496). print.progress logical show current iteration (default: FALSE). distances length-\\(K\\) list element \\((N\\times N_k)\\) pairwise distance atoms fixed support given measures.","code":""},{"path":"https://kisungyou.com/T4transport/reference/fbary15B.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fixed-Support Barycenter by Benamou et al. (2015) — fbary15B","text":"length-\\(N\\) vector probability vector.","code":""},{"path":"https://kisungyou.com/T4transport/reference/fbary15B.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fixed-Support Barycenter by Benamou et al. (2015) — fbary15B","text":"Benamou J, Carlier G, Cuturi M, Nenna L, Peyré G (2015). “Iterative Bregman Projections Regularized Transportation Problems.” SIAM Journal Scientific Computing, 37(2), A1111-A1138. ISSN 1064-8275, 1095-7197, doi:10.1137/141000439 .","code":""},{"path":"https://kisungyou.com/T4transport/reference/fbary15B.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fixed-Support Barycenter by Benamou et al. (2015) — fbary15B","text":"","code":"# \\donttest{ #------------------------------------------------------------------- #     Wasserstein Barycenter for Fixed Atoms with Two Gaussians # # * class 1 : samples from Gaussian with mean=(-4, -4) # * class 2 : samples from Gaussian with mean=(+4, +4) # * target support consists of 7 integer points from -6 to 6, #   where ideally, weight is concentrated near 0 since it's average! #------------------------------------------------------------------- ## GENERATE DATA #  Empirical Measures set.seed(100) ndat = 500 dat1 = matrix(rnorm(ndat*2, mean=-4, sd=0.5),ncol=2) dat2 = matrix(rnorm(ndat*2, mean=+4, sd=0.5),ncol=2)   myatoms = list() myatoms[[1]] = dat1 myatoms[[2]] = dat2 mydata = rbind(dat1, dat2)  #  Fixed Support support = cbind(seq(from=-8,to=8,by=2),                 seq(from=-8,to=8,by=2)) ## COMPUTE comp1 = fbary15B(support, myatoms, lambda=0.5, maxiter=10) comp2 = fbary15B(support, myatoms, lambda=1,   maxiter=10) comp3 = fbary15B(support, myatoms, lambda=10,  maxiter=10)  ## VISUALIZE opar <- par(no.readonly=TRUE) par(mfrow=c(1,3), pty=\"s\") barplot(comp1, ylim=c(0,1), main=\"Probability\\n (lambda=0.5)\") barplot(comp2, ylim=c(0,1), main=\"Probability\\n (lambda=1)\") barplot(comp3, ylim=c(0,1), main=\"Probability\\n (lambda=10)\")  par(opar) # }"},{"path":"https://kisungyou.com/T4transport/reference/gaussbary1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Barycenter of Gaussian Distributions in \\(\\mathbb{R}\\) — gaussbary1d","title":"Barycenter of Gaussian Distributions in \\(\\mathbb{R}\\) — gaussbary1d","text":"Given collection Gaussian distributions \\(\\mathcal{N}(\\mu_i, \\sigma_i^2)\\) \\(=1,\\ldots,n\\), compute Wasserstein barycenter order 2. barycenter computation variance components, use fixed-point algorithm Álvarez-Esteban et al. (2016) .","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussbary1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barycenter of Gaussian Distributions in \\(\\mathbb{R}\\) — gaussbary1d","text":"","code":"gaussbary1d(means, vars, weights = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/gaussbary1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barycenter of Gaussian Distributions in \\(\\mathbb{R}\\) — gaussbary1d","text":"means length-\\(n\\) vector mean parameters. vars length-\\(n\\) vector variance parameters. weights weight image; NULL (default), uniform weight set. Otherwise, length-\\(n\\) vector nonnegative weights. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). maxiter maximum number iterations (default: 496).","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussbary1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barycenter of Gaussian Distributions in \\(\\mathbb{R}\\) — gaussbary1d","text":"named list containing mean mean estimated barycenter distribution. var variance estimated barycenter distribution.","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussbary1d.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Barycenter of Gaussian Distributions in \\(\\mathbb{R}\\) — gaussbary1d","text":"Álvarez-Esteban PC, del Barrio E, Cuesta-Albertos JA, Matrán C (2016). “Fixed-Point Approach Barycenters Wasserstein Space.” Journal Mathematical Analysis Applications, 441(2), 744–762. ISSN 0022247X, doi:10.1016/j.jmaa.2016.04.045 .","code":""},{"path":[]},{"path":"https://kisungyou.com/T4transport/reference/gaussbary1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barycenter of Gaussian Distributions in \\(\\mathbb{R}\\) — gaussbary1d","text":"","code":"#---------------------------------------------------------------------- #                         Two Gaussians # # Two Gaussian distributions are parametrized as follows. # Type 1 : (mean, var) = (-4, 1/4) # Type 2 : (mean, var) = (+4, 1/4) #---------------------------------------------------------------------- # GENERATE PARAMETERS par_mean = c(-4, 4) par_vars = c(0.25, 0.25)  # COMPUTE THE BARYCENTER OF EQUAL WEIGHTS gmean = gaussbary1d(par_mean, par_vars)  # QUANTITIES FOR PLOTTING x_grid  = seq(from=-6, to=6, length.out=200) y_dist1 = stats::dnorm(x_grid, mean=-4, sd=0.5) y_dist2 = stats::dnorm(x_grid, mean=+4, sd=0.5) y_gmean = stats::dnorm(x_grid, mean=gmean$mean, sd=sqrt(gmean$var))   # VISUALIZE opar <- par(no.readonly=TRUE) plot(x_grid, y_gmean, lwd=2, col=\"red\", type=\"l\",      main=\"Barycenter\", xlab=\"x\", ylab=\"density\") lines(x_grid, y_dist1) lines(x_grid, y_dist2)  par(opar)"},{"path":"https://kisungyou.com/T4transport/reference/gaussbarynd.html","id":null,"dir":"Reference","previous_headings":"","what":"Barycenter of Gaussian Distributions in R^n — gaussbarynd","title":"Barycenter of Gaussian Distributions in R^n — gaussbarynd","text":"Barycenter Gaussian Distributions R^n","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussbarynd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barycenter of Gaussian Distributions in R^n — gaussbarynd","text":"","code":"gaussbarynd(means, vars, weights = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/gaussbarynd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barycenter of Gaussian Distributions in R^n — gaussbarynd","text":"means \\((N\\times p)\\) matrix whose rows mean vectors. vars \\((p\\times p\\times N)\\) array slice covariance matrix. weights weight image; NULL (default), uniform weight set. Otherwise, length-\\(N\\) vector nonnegative weights. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). maxiter maximum number iterations (default: 496).","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussbarynd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barycenter of Gaussian Distributions in R^n — gaussbarynd","text":"named list containing mean length-\\(p\\) vector mean estimated barycenter distribution. var \\((p\\times p)\\) matrix variance estimated barycenter distribution.","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussbarypd.html","id":null,"dir":"Reference","previous_headings":"","what":"Barycenter of Gaussian Distributions in \\(\\mathbb{R}^p\\) — gaussbarypd","title":"Barycenter of Gaussian Distributions in \\(\\mathbb{R}^p\\) — gaussbarypd","text":"Given collection \\(n\\)-dimensional Gaussian distributions \\(N(\\mu_i, \\Sigma_i^2)\\) \\(=1,\\ldots,n\\), compute Wasserstein barycenter order 2. barycenter computation variance components, use fixed-point algorithm Álvarez-Esteban et al. (2016) .","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussbarypd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barycenter of Gaussian Distributions in \\(\\mathbb{R}^p\\) — gaussbarypd","text":"","code":"gaussbarypd(means, vars, weights = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/gaussbarypd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barycenter of Gaussian Distributions in \\(\\mathbb{R}^p\\) — gaussbarypd","text":"means \\((n\\times p)\\) matrix whose rows mean vectors. vars \\((p\\times p\\times n)\\) array slice covariance matrix. weights weight image; NULL (default), uniform weight set. Otherwise, length-\\(n\\) vector nonnegative weights. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). maxiter maximum number iterations (default: 496).","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussbarypd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barycenter of Gaussian Distributions in \\(\\mathbb{R}^p\\) — gaussbarypd","text":"named list containing mean length-\\(p\\) vector mean estimated barycenter distribution. var \\((p\\times p)\\) matrix variance estimated barycenter distribution.","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussbarypd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Barycenter of Gaussian Distributions in \\(\\mathbb{R}^p\\) — gaussbarypd","text":"Álvarez-Esteban PC, del Barrio E, Cuesta-Albertos JA, Matrán C (2016). “Fixed-Point Approach Barycenters Wasserstein Space.” Journal Mathematical Analysis Applications, 441(2), 744–762. ISSN 0022247X, doi:10.1016/j.jmaa.2016.04.045 .","code":""},{"path":[]},{"path":"https://kisungyou.com/T4transport/reference/gaussbarypd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barycenter of Gaussian Distributions in \\(\\mathbb{R}^p\\) — gaussbarypd","text":"","code":"# \\donttest{ #---------------------------------------------------------------------- #                         Two Gaussians in R^2 #---------------------------------------------------------------------- # GENERATE PARAMETERS # means par_mean = rbind(c(-4,0), c(4,0))  # covariances par_vars = array(0,c(2,2,2)) par_vars[,,1] = cbind(c(4,-2),c(-2,4)) par_vars[,,2] = cbind(c(4,+2),c(+2,4))  # COMPUTE THE BARYCENTER OF EQUAL WEIGHTS gmean = gaussbarypd(par_mean, par_vars)  # GET COORDINATES FOR DRAWING pt_type1 = gaussvis2d(par_mean[1,], par_vars[,,1]) pt_type2 = gaussvis2d(par_mean[2,], par_vars[,,2]) pt_gmean = gaussvis2d(gmean$mean, gmean$var)  # VISUALIZE opar <- par(no.readonly=TRUE) plot(pt_gmean, lwd=2, col=\"red\", type=\"l\",      main=\"Barycenter\", xlab=\"\", ylab=\"\",       xlim=c(-6,6)) lines(pt_type1) lines(pt_type2)  par(opar) # }"},{"path":"https://kisungyou.com/T4transport/reference/gaussmed1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserstein Median of Gaussian Distributions in \\(\\mathbf{R}\\) — gaussmed1d","title":"Wasserstein Median of Gaussian Distributions in \\(\\mathbf{R}\\) — gaussmed1d","text":"Given collection Gaussian distributions \\(\\mathcal{N}(\\mu_i, \\sigma_i^2)\\) \\(=1,\\ldots,n\\), compute Wasserstein median.","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussmed1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserstein Median of Gaussian Distributions in \\(\\mathbf{R}\\) — gaussmed1d","text":"","code":"gaussmed1d(means, vars, weights = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/gaussmed1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserstein Median of Gaussian Distributions in \\(\\mathbf{R}\\) — gaussmed1d","text":"means length-\\(n\\) vector mean parameters. vars length-\\(n\\) vector variance parameters. weights weight image; NULL (default), uniform weight set. Otherwise, length-\\(n\\) vector nonnegative weights. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). maxiter maximum number iterations (default: 496).","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussmed1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserstein Median of Gaussian Distributions in \\(\\mathbf{R}\\) — gaussmed1d","text":"named list containing mean mean estimated median distribution. var variance estimated median distribution.","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussmed1d.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Wasserstein Median of Gaussian Distributions in \\(\\mathbf{R}\\) — gaussmed1d","text":"K, Shung D, Giuffrè M (2024). “Wasserstein Median Probability Measures.” Journal Computational Graphical Statistics, 1–25. ISSN 1061-8600, 1537-2715, doi:10.1080/10618600.2024.2374580 .","code":""},{"path":[]},{"path":"https://kisungyou.com/T4transport/reference/gaussmed1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserstein Median of Gaussian Distributions in \\(\\mathbf{R}\\) — gaussmed1d","text":"","code":"# \\donttest{ #---------------------------------------------------------------------- #                         Tree Gaussians # # Three Gaussian distributions are parametrized as follows. # Type 1 : (mean, sd) = (-4, 1) # Type 2 : (mean, sd) = ( 0, 1/5) # Type 3 : (mean, sd) = (+6, 1/2) #---------------------------------------------------------------------- # GENERATE PARAMETERS par_mean = c(-4, 0, +6) par_vars = c(1, 0.04, 0.25)  # COMPUTE THE WASSERSTEIN MEDIAN gmeds = gaussmed1d(par_mean, par_vars)  # COMPUTE THE BARYCENTER  gmean = gaussbary1d(par_mean, par_vars)  # QUANTITIES FOR PLOTTING x_grid  = seq(from=-6, to=8, length.out=1000) y_dist1 = stats::dnorm(x_grid, mean=par_mean[1], sd=sqrt(par_vars[1])) y_dist2 = stats::dnorm(x_grid, mean=par_mean[2], sd=sqrt(par_vars[2])) y_dist3 = stats::dnorm(x_grid, mean=par_mean[3], sd=sqrt(par_vars[3]))  y_gmean = stats::dnorm(x_grid, mean=gmean$mean, sd=sqrt(gmean$var))  y_gmeds = stats::dnorm(x_grid, mean=gmeds$mean, sd=sqrt(gmeds$var))  # VISUALIZE opar <- par(no.readonly=TRUE) plot(x_grid, y_gmeds, lwd=3, col=\"red\", type=\"l\",      main=\"Three Gaussians\", xlab=\"x\", ylab=\"density\",       xlim=range(x_grid), ylim=c(0,2.5)) lines(x_grid, y_gmean, lwd=3, col=\"blue\") lines(x_grid, y_dist1, lwd=1.5, lty=2) lines(x_grid, y_dist2, lwd=1.5, lty=2) lines(x_grid, y_dist3, lwd=1.5, lty=2) legend(\"topleft\", legend=c(\"Median\",\"Barycenter\"),        col=c(\"red\",\"blue\"), lwd=c(3,3), lty=c(1,2))  par(opar) # }"},{"path":"https://kisungyou.com/T4transport/reference/gaussmedpd.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserstein Median of Gaussian Distributions in \\(\\mathbf{R}^p\\) — gaussmedpd","title":"Wasserstein Median of Gaussian Distributions in \\(\\mathbf{R}^p\\) — gaussmedpd","text":"Given collection \\(p\\)-dimensional Gaussian distributions \\(\\mathcal{N}(\\mu_i, \\sigma_i^2)\\) \\(=1,\\ldots,n\\), compute Wasserstein median.","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussmedpd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserstein Median of Gaussian Distributions in \\(\\mathbf{R}^p\\) — gaussmedpd","text":"","code":"gaussmedpd(means, vars, weights = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/gaussmedpd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserstein Median of Gaussian Distributions in \\(\\mathbf{R}^p\\) — gaussmedpd","text":"means \\((n\\times p)\\) matrix whose rows mean vectors. vars \\((p\\times p\\times n)\\) array slice covariance matrix. weights weight image; NULL (default), uniform weight set. Otherwise, length-\\(n\\) vector nonnegative weights. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). maxiter maximum number iterations (default: 496).","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussmedpd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserstein Median of Gaussian Distributions in \\(\\mathbf{R}^p\\) — gaussmedpd","text":"named list containing mean length-\\(p\\) vector mean estimated median distribution. var \\((p\\times p)\\) matrix variance estimated median distribution.","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussmedpd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Wasserstein Median of Gaussian Distributions in \\(\\mathbf{R}^p\\) — gaussmedpd","text":"K, Shung D, Giuffrè M (2024). “Wasserstein Median Probability Measures.” Journal Computational Graphical Statistics, 1–25. ISSN 1061-8600, 1537-2715, doi:10.1080/10618600.2024.2374580 .","code":""},{"path":[]},{"path":"https://kisungyou.com/T4transport/reference/gaussmedpd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserstein Median of Gaussian Distributions in \\(\\mathbf{R}^p\\) — gaussmedpd","text":"","code":"# \\donttest{ #---------------------------------------------------------------------- #                         Three Gaussians in R^2 #---------------------------------------------------------------------- # GENERATE PARAMETERS # means par_mean = rbind(c(-4,0), c(0,0), c(5,-1))  # covariances par_vars = array(0,c(2,2,3)) par_vars[,,1] = cbind(c(2,-1),c(-1,2)) par_vars[,,2] = cbind(c(4,+1),c(+1,4)) par_vars[,,3] = diag(c(4,1))  # COMPUTE THE MEDIAN gmeds = gaussmedpd(par_mean, par_vars)  # COMPUTE THE BARYCENTER  gmean = gaussbarypd(par_mean, par_vars)  # GET COORDINATES FOR DRAWING pt_type1 = gaussvis2d(par_mean[1,], par_vars[,,1]) pt_type2 = gaussvis2d(par_mean[2,], par_vars[,,2]) pt_type3 = gaussvis2d(par_mean[3,], par_vars[,,3]) pt_gmean = gaussvis2d(gmean$mean, gmean$var) pt_gmeds = gaussvis2d(gmeds$mean, gmeds$var)  # VISUALIZE opar <- par(no.readonly=TRUE) plot(pt_gmean, lwd=2, col=\"red\", type=\"l\",      main=\"Three Gaussians\", xlab=\"\", ylab=\"\",       xlim=c(-6,8), ylim=c(-2.5,2.5)) lines(pt_gmeds, lwd=2, col=\"blue\") lines(pt_type1, lty=2, lwd=5) lines(pt_type2, lty=2, lwd=5) lines(pt_type3, lty=2, lwd=5) abline(h=0, col=\"grey80\", lty=3) abline(v=0, col=\"grey80\", lty=3) legend(\"topright\", legend=c(\"Median\",\"Barycenter\"),        lwd=2, lty=1, col=c(\"blue\",\"red\"))  par(opar) # }"},{"path":"https://kisungyou.com/T4transport/reference/gaussvis2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling from a Bivariate Gaussian Distribution for Visualization — gaussvis2d","title":"Sampling from a Bivariate Gaussian Distribution for Visualization — gaussvis2d","text":"function samples points along contour ellipse represented mean variance parameters 2-dimensional Gaussian distribution help ease manipulating visualization specified distribution. example, can directly use basic plot() function directly drawing.","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussvis2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling from a Bivariate Gaussian Distribution for Visualization — gaussvis2d","text":"","code":"gaussvis2d(mean, var, n = 500)"},{"path":"https://kisungyou.com/T4transport/reference/gaussvis2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling from a Bivariate Gaussian Distribution for Visualization — gaussvis2d","text":"mean length-\\(2\\) vector mean parameter. var \\((2\\times 2)\\) matrix covariance parameter. n number points drawn (default: 500).","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussvis2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling from a Bivariate Gaussian Distribution for Visualization — gaussvis2d","text":"\\((n\\times 2)\\) matrix.","code":""},{"path":"https://kisungyou.com/T4transport/reference/gaussvis2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling from a Bivariate Gaussian Distribution for Visualization — gaussvis2d","text":"","code":"# \\donttest{ #---------------------------------------------------------------------- #                        Three Gaussians in R^2 #---------------------------------------------------------------------- # MEAN PARAMETERS loc1 = c(-3,0) loc2 = c(0,5) loc3 = c(3,0)  # COVARIANCE PARAMETERS var1 = cbind(c(4,-2),c(-2,4)) var2 = diag(c(9,1)) var3 = cbind(c(4,2),c(2,4))  # GENERATE POINTS visA = gaussvis2d(loc1, var1) visB = gaussvis2d(loc2, var2) visC = gaussvis2d(loc3, var3)  # VISUALIZE opar <- par(no.readonly=TRUE) plot(visA[,1], visA[,2], type=\"l\", xlim=c(-5,5), ylim=c(-2,9),      lwd=3, col=\"red\", main=\"3 Gaussian Distributions\") lines(visB[,1], visB[,2], lwd=3, col=\"blue\") lines(visC[,1], visC[,2], lwd=3, col=\"orange\") legend(\"top\", legend=c(\"Type 1\",\"Type 2\",\"Type 3\"),        lwd=3, col=c(\"red\",\"blue\",\"orange\"), horiz=TRUE)  par(opar) # }"},{"path":"https://kisungyou.com/T4transport/reference/hist14C.html","id":null,"dir":"Reference","previous_headings":"","what":"Barycenter of Histograms by Cuturi & Doucet (2014) — hist14C","title":"Barycenter of Histograms by Cuturi & Doucet (2014) — hist14C","text":"Given multiple histograms represented \"histogram\" S3 objects, compute  Wasserstein barycenter. need one requirement histograms  input list hists must breaks. See example  construct histogram predefined breaks/bins.","code":""},{"path":"https://kisungyou.com/T4transport/reference/hist14C.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barycenter of Histograms by Cuturi & Doucet (2014) — hist14C","text":"","code":"hist14C(hists, p = 2, weights = NULL, lambda = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/hist14C.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barycenter of Histograms by Cuturi & Doucet (2014) — hist14C","text":"hists length-\\(N\\) list histograms (\"histogram\" object) breaks. p exponent order distance (default: 2). weights weight image; NULL (default), uniform weight set. Otherwise,  length-\\(N\\) vector nonnegative weights. lambda regularization parameter; NULL (default), paper's suggestion  taken, nonnegative real number. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). init.vec initial weight vector (default: uniform weight). maxiter maximum number iterations (default: 496). nthread number threads OpenMP run (default: 1). print.progress logical show current iteration (default: TRUE).","code":""},{"path":"https://kisungyou.com/T4transport/reference/hist14C.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barycenter of Histograms by Cuturi & Doucet (2014) — hist14C","text":"\"histogram\" object barycenter.","code":""},{"path":"https://kisungyou.com/T4transport/reference/hist14C.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Barycenter of Histograms by Cuturi & Doucet (2014) — hist14C","text":"Cuturi M, Doucet (2014). “Fast computation wasserstein barycenters.” Xing EP, Jebara T (eds.), Proceedings 31st international conference international conference machine learning - volume 32, volume 32 Proceedings machine learning research, 685--693. http://proceedings.mlr.press/v32/cuturi14.html.","code":""},{"path":[]},{"path":"https://kisungyou.com/T4transport/reference/hist14C.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barycenter of Histograms by Cuturi & Doucet (2014) — hist14C","text":"","code":"#---------------------------------------------------------------------- #                      Binned from Two Gaussians # # EXAMPLE : Very Small Example for CRAN; just showing how to use it! #---------------------------------------------------------------------- # GENERATE FROM TWO GAUSSIANS WITH DIFFERENT MEANS set.seed(100) x  = stats::rnorm(1000, mean=-4, sd=0.5) y  = stats::rnorm(1000, mean=+4, sd=0.5) bk = seq(from=-10, to=10, length.out=20)  # HISTOGRAMS WITH COMMON BREAKS histxy = list() histxy[[1]] = hist(x, breaks=bk, plot=FALSE) histxy[[2]] = hist(y, breaks=bk, plot=FALSE)  # COMPUTE hh = hist14C(histxy, maxiter=5)  # VISUALIZE opar <- par(no.readonly=TRUE) par(mfrow=c(1,2)) barplot(histxy[[1]]$density, col=rgb(0,0,1,1/4),          ylim=c(0, 0.75), main=\"Two Histograms\") barplot(histxy[[2]]$density, col=rgb(1,0,0,1/4),          ylim=c(0, 0.75), add=TRUE) barplot(hh$density, main=\"Barycenter\",         ylim=c(0, 0.75))  par(opar)"},{"path":"https://kisungyou.com/T4transport/reference/hist15B.html","id":null,"dir":"Reference","previous_headings":"","what":"Barycenter of Histograms by Benamou et al. (2015) — hist15B","title":"Barycenter of Histograms by Benamou et al. (2015) — hist15B","text":"Given multiple histograms represented \"histogram\" S3 objects, compute  Wasserstein barycenter. need one requirement histograms  input list hists must breaks. See example  construct histogram predefined breaks/bins.","code":""},{"path":"https://kisungyou.com/T4transport/reference/hist15B.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barycenter of Histograms by Benamou et al. (2015) — hist15B","text":"","code":"hist15B(hists, p = 2, weights = NULL, lambda = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/hist15B.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barycenter of Histograms by Benamou et al. (2015) — hist15B","text":"hists length-\\(N\\) list histograms (\"histogram\" object) breaks. p exponent order distance (default: 2). weights weight image; NULL (default), uniform weight set. Otherwise,  length-\\(N\\) vector nonnegative weights. lambda regularization parameter; NULL (default), paper's suggestion  taken, nonnegative real number. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). init.vec initial weight vector (default: uniform weight). maxiter maximum number iterations (default: 496). nthread number threads OpenMP run (default: 1). print.progress logical show current iteration (default: TRUE).","code":""},{"path":"https://kisungyou.com/T4transport/reference/hist15B.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barycenter of Histograms by Benamou et al. (2015) — hist15B","text":"\"histogram\" object barycenter.","code":""},{"path":"https://kisungyou.com/T4transport/reference/hist15B.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Barycenter of Histograms by Benamou et al. (2015) — hist15B","text":"Benamou J, Carlier G, Cuturi M, Nenna L, Peyré G (2015). “Iterative Bregman Projections Regularized Transportation Problems.” SIAM Journal Scientific Computing, 37(2), A1111--A1138. ISSN 1064-8275, 1095-7197, doi: 10.1137/141000439 .","code":""},{"path":[]},{"path":"https://kisungyou.com/T4transport/reference/hist15B.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barycenter of Histograms by Benamou et al. (2015) — hist15B","text":"","code":"#---------------------------------------------------------------------- #                      Binned from Two Gaussians # # EXAMPLE : Very Small Example for CRAN; just showing how to use it! #---------------------------------------------------------------------- # GENERATE FROM TWO GAUSSIANS WITH DIFFERENT MEANS set.seed(100) x  = stats::rnorm(1000, mean=-4, sd=0.5) y  = stats::rnorm(1000, mean=+4, sd=0.5) bk = seq(from=-10, to=10, length.out=20)  # HISTOGRAMS WITH COMMON BREAKS histxy = list() histxy[[1]] = hist(x, breaks=bk, plot=FALSE) histxy[[2]] = hist(y, breaks=bk, plot=FALSE)  # COMPUTE hh = hist15B(histxy, maxiter=5)  # VISUALIZE opar <- par(no.readonly=TRUE) par(mfrow=c(1,2)) barplot(histxy[[1]]$density, col=rgb(0,0,1,1/4),          ylim=c(0, 0.75), main=\"Two Histograms\") barplot(histxy[[2]]$density, col=rgb(1,0,0,1/4),          ylim=c(0, 0.75), add=TRUE) barplot(hh$density, main=\"Barycenter\",         ylim=c(0, 0.75))  par(opar)"},{"path":"https://kisungyou.com/T4transport/reference/histbary14C.html","id":null,"dir":"Reference","previous_headings":"","what":"Barycenter of Histograms by Cuturi and Doucet (2014) — histbary14C","title":"Barycenter of Histograms by Cuturi and Doucet (2014) — histbary14C","text":"Given multiple histograms represented \"histogram\" S3 objects, compute Wasserstein barycenter. need one requirement histograms input list hists must breaks. See example construct histogram predefined breaks/bins.","code":""},{"path":"https://kisungyou.com/T4transport/reference/histbary14C.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barycenter of Histograms by Cuturi and Doucet (2014) — histbary14C","text":"","code":"histbary14C(hists, p = 2, weights = NULL, lambda = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/histbary14C.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barycenter of Histograms by Cuturi and Doucet (2014) — histbary14C","text":"hists length-\\(N\\) list histograms (\"histogram\" object) breaks. p exponent order distance (default: 2). weights weight image; NULL (default), uniform weight set. Otherwise, length-\\(N\\) vector nonnegative weights. lambda regularization parameter; NULL (default), paper's suggestion taken, nonnegative real number. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). init.vec initial weight vector (default: uniform weight). maxiter maximum number iterations (default: 496). nthread number threads OpenMP run (default: 1). print.progress logical show current iteration (default: TRUE).","code":""},{"path":"https://kisungyou.com/T4transport/reference/histbary14C.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barycenter of Histograms by Cuturi and Doucet (2014) — histbary14C","text":"\"histogram\" object barycenter.","code":""},{"path":"https://kisungyou.com/T4transport/reference/histbary14C.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Barycenter of Histograms by Cuturi and Doucet (2014) — histbary14C","text":"Cuturi M, Doucet (2014-06-22/2014-06-24). “Fast Computation Wasserstein Barycenters.” Xing EP, Jebara T (eds.), Proceedings 31st International Conference Machine Learning, volume 32 Proceedings Machine Learning Research, 685–693.","code":""},{"path":[]},{"path":"https://kisungyou.com/T4transport/reference/histbary14C.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barycenter of Histograms by Cuturi and Doucet (2014) — histbary14C","text":"","code":"# \\donttest{ #---------------------------------------------------------------------- #                      Binned from Two Gaussians # # EXAMPLE : Very Small Example for CRAN; just showing how to use it! #---------------------------------------------------------------------- # GENERATE FROM TWO GAUSSIANS WITH DIFFERENT MEANS set.seed(100) x  = stats::rnorm(1000, mean=-4, sd=0.5) y  = stats::rnorm(1000, mean=+4, sd=0.5) bk = seq(from=-10, to=10, length.out=20)  # HISTOGRAMS WITH COMMON BREAKS histxy = list() histxy[[1]] = hist(x, breaks=bk, plot=FALSE) histxy[[2]] = hist(y, breaks=bk, plot=FALSE)  # COMPUTE hh = histbary14C(histxy, maxiter=5)  # VISUALIZE opar <- par(no.readonly=TRUE) par(mfrow=c(1,2)) barplot(histxy[[1]]$density, col=rgb(0,0,1,1/4),          ylim=c(0, 0.75), main=\"Two Histograms\") barplot(histxy[[2]]$density, col=rgb(1,0,0,1/4),          ylim=c(0, 0.75), add=TRUE) barplot(hh$density, main=\"Barycenter\",         ylim=c(0, 0.75))  par(opar) # }"},{"path":"https://kisungyou.com/T4transport/reference/histbary15B.html","id":null,"dir":"Reference","previous_headings":"","what":"Barycenter of Histograms by Benamou et al. (2015) — histbary15B","title":"Barycenter of Histograms by Benamou et al. (2015) — histbary15B","text":"Given multiple histograms represented \"histogram\" S3 objects, compute Wasserstein barycenter. need one requirement histograms input list hists must breaks. See example construct histogram predefined breaks/bins.","code":""},{"path":"https://kisungyou.com/T4transport/reference/histbary15B.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barycenter of Histograms by Benamou et al. (2015) — histbary15B","text":"","code":"histbary15B(hists, p = 2, weights = NULL, lambda = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/histbary15B.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barycenter of Histograms by Benamou et al. (2015) — histbary15B","text":"hists length-\\(N\\) list histograms (\"histogram\" object) breaks. p exponent order distance (default: 2). weights weight image; NULL (default), uniform weight set. Otherwise, length-\\(N\\) vector nonnegative weights. lambda regularization parameter; NULL (default), paper's suggestion taken, nonnegative real number. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). init.vec initial weight vector (default: uniform weight). maxiter maximum number iterations (default: 496). nthread number threads OpenMP run (default: 1). print.progress logical show current iteration (default: TRUE).","code":""},{"path":"https://kisungyou.com/T4transport/reference/histbary15B.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barycenter of Histograms by Benamou et al. (2015) — histbary15B","text":"\"histogram\" object barycenter.","code":""},{"path":"https://kisungyou.com/T4transport/reference/histbary15B.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Barycenter of Histograms by Benamou et al. (2015) — histbary15B","text":"Benamou J, Carlier G, Cuturi M, Nenna L, Peyré G (2015). “Iterative Bregman Projections Regularized Transportation Problems.” SIAM Journal Scientific Computing, 37(2), A1111-A1138. ISSN 1064-8275, 1095-7197, doi:10.1137/141000439 .","code":""},{"path":[]},{"path":"https://kisungyou.com/T4transport/reference/histbary15B.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barycenter of Histograms by Benamou et al. (2015) — histbary15B","text":"","code":"#---------------------------------------------------------------------- #                      Binned from Two Gaussians # # EXAMPLE : Very Small Example for CRAN; just showing how to use it! #---------------------------------------------------------------------- # GENERATE FROM TWO GAUSSIANS WITH DIFFERENT MEANS set.seed(100) x  = stats::rnorm(1000, mean=-4, sd=0.5) y  = stats::rnorm(1000, mean=+4, sd=0.5) bk = seq(from=-10, to=10, length.out=20)  # HISTOGRAMS WITH COMMON BREAKS histxy = list() histxy[[1]] = hist(x, breaks=bk, plot=FALSE) histxy[[2]] = hist(y, breaks=bk, plot=FALSE)  # COMPUTE hh = histbary15B(histxy, maxiter=5)  # VISUALIZE opar <- par(no.readonly=TRUE) par(mfrow=c(1,2)) barplot(histxy[[1]]$density, col=rgb(0,0,1,1/4),          ylim=c(0, 0.75), main=\"Two Histograms\") barplot(histxy[[2]]$density, col=rgb(1,0,0,1/4),          ylim=c(0, 0.75), add=TRUE) barplot(hh$density, main=\"Barycenter\",         ylim=c(0, 0.75))  par(opar)"},{"path":"https://kisungyou.com/T4transport/reference/histmed22Y.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserstein Median of Histograms by You et al. (2022) — histmed22Y","title":"Wasserstein Median of Histograms by You et al. (2022) — histmed22Y","text":"Given multiple histograms represented \"histogram\" S3 objects, compute Wasserstein median order 2. need one requirement histograms input list hists must breaks. See example construct histogram predefined breaks/bins.","code":""},{"path":"https://kisungyou.com/T4transport/reference/histmed22Y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserstein Median of Histograms by You et al. (2022) — histmed22Y","text":"","code":"histmed22Y(hists, weights = NULL, lambda = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/histmed22Y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserstein Median of Histograms by You et al. (2022) — histmed22Y","text":"hists length-\\(N\\) list histograms (\"histogram\" object) breaks. weights weight image; NULL (default), uniform weight set. Otherwise, length-\\(N\\) vector nonnegative weights. lambda regularization parameter; NULL (default), paper's suggestion taken, nonnegative real number. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). init.vec initial weight vector (default: uniform weight). maxiter maximum number iterations (default: 496). nthread number threads OpenMP run (default: 1). print.progress logical show current iteration (default: FALSE).","code":""},{"path":"https://kisungyou.com/T4transport/reference/histmed22Y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserstein Median of Histograms by You et al. (2022) — histmed22Y","text":"\"histogram\" object Wasserstein median histogram.","code":""},{"path":"https://kisungyou.com/T4transport/reference/histmed22Y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserstein Median of Histograms by You et al. (2022) — histmed22Y","text":"","code":"# \\donttest{ #---------------------------------------------------------------------- #                      Binned from Two Gaussians # # EXAMPLE : small example for CRAN for visualization purpose. #---------------------------------------------------------------------- # GENERATE FROM TWO GAUSSIANS WITH DIFFERENT MEANS set.seed(100) x  = stats::rnorm(1000, mean=-4, sd=0.5) y  = stats::rnorm(1000, mean=+4, sd=0.5) bk = seq(from=-10, to=10, length.out=20)  # HISTOGRAMS WITH COMMON BREAKS histxy = list() histxy[[1]] = hist(x, breaks=bk, plot=FALSE) histxy[[2]] = hist(y, breaks=bk, plot=FALSE)  # COMPUTE hmean = histbary15B(histxy) hmeds = histmed22Y(histxy)  # VISUALIZE opar <- par(no.readonly=TRUE) par(mfrow=c(1,3)) barplot(histxy[[1]]$density, col=rgb(0,0,1,1/4),          ylim=c(0, 1.05), main=\"Two Histograms\") barplot(histxy[[2]]$density, col=rgb(1,0,0,1/4),          ylim=c(0, 1.05), add=TRUE) barplot(hmean$density, main=\"Barycenter\",         ylim=c(0, 1.05)) barplot(hmeds$density, main=\"Wasserstein Median\",         ylim=c(0, 1.05))  par(opar) # }"},{"path":"https://kisungyou.com/T4transport/reference/image14C.html","id":null,"dir":"Reference","previous_headings":"","what":"Barycenter of Images according to Cuturi & Doucet (2014) — image14C","title":"Barycenter of Images according to Cuturi & Doucet (2014) — image14C","text":"Using entropic regularization Wasserstein barycenter computation, image14C  finds barycentric image \\(X^*\\) given multiple images \\(X_1,X_2,\\ldots,X_N\\).  Please note followings; (1) take matrix image please  make grayscale , (2) images size - resizing performed.","code":""},{"path":"https://kisungyou.com/T4transport/reference/image14C.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barycenter of Images according to Cuturi & Doucet (2014) — image14C","text":"","code":"image14C(images, p = 2, weights = NULL, lambda = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/image14C.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barycenter of Images according to Cuturi & Doucet (2014) — image14C","text":"images length-\\(N\\) list -size image matrices size \\((m\\times n)\\). p exponent order distance (default: 2). weights weight image; NULL (default), uniform weight set. Otherwise,  length-\\(N\\) vector nonnegative weights. lambda regularization parameter; NULL (default), paper's suggestion  taken, nonnegative real number. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). init.image initial weight image (default: uniform weight). maxiter maximum number iterations (default: 496). nthread number threads OpenMP run (default: 1). print.progress logical show current iteration (default: TRUE).","code":""},{"path":"https://kisungyou.com/T4transport/reference/image14C.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barycenter of Images according to Cuturi & Doucet (2014) — image14C","text":"\\((m\\times n)\\) matrix barycentric image.","code":""},{"path":"https://kisungyou.com/T4transport/reference/image14C.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Barycenter of Images according to Cuturi & Doucet (2014) — image14C","text":"Cuturi M, Doucet (2014). “Fast computation wasserstein barycenters.” Xing EP, Jebara T (eds.), Proceedings 31st international conference international conference machine learning - volume 32, volume 32 Proceedings machine learning research, 685--693. http://proceedings.mlr.press/v32/cuturi14.html.","code":""},{"path":[]},{"path":"https://kisungyou.com/T4transport/reference/image14C.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barycenter of Images according to Cuturi & Doucet (2014) — image14C","text":"","code":"#---------------------------------------------------------------------- #                       MNIST Data with Digit 3 # # EXAMPLE 1 : Very Small  Example for CRAN; just showing how to use it! # EXAMPLE 2 : Medium-size Example for Evolution of Output #---------------------------------------------------------------------- # EXAMPLE 1 data(digit3) datsmall = digit3[1:2] outsmall = image14C(datsmall, maxiter=3)  if (FALSE) { # EXAMPLE 2 : Barycenter of 100 Images # RANDOMLY SELECT THE IMAGES data(digit3) dat2 = digit3[sample(1:2000, 100)]  # select 100 images  # RUN SEQUENTIALLY run10 = image14C(dat2, maxiter=10)                   # first 10 iterations run20 = image14C(dat2, maxiter=10, init.image=run10) # run 40 more run50 = image14C(dat2, maxiter=30, init.image=run20) # run 50 more  # VISUALIZE opar <- par(no.readonly=TRUE) par(mfrow=c(2,3), pty=\"s\") image(dat2[[sample(100,1)]], axes=FALSE, main=\"a random image\") image(dat2[[sample(100,1)]], axes=FALSE, main=\"a random image\") image(dat2[[sample(100,1)]], axes=FALSE, main=\"a random image\") image(run10, axes=FALSE, main=\"barycenter after 10 iter\") image(run20, axes=FALSE, main=\"barycenter after 20 iter\") image(run50, axes=FALSE, main=\"barycenter after 50 iter\") par(opar) }"},{"path":"https://kisungyou.com/T4transport/reference/image15B.html","id":null,"dir":"Reference","previous_headings":"","what":"Barycenter of Images according to Benamou et al. (2015) — image15B","title":"Barycenter of Images according to Benamou et al. (2015) — image15B","text":"Using entropic regularization Wasserstein barycenter computation, image15B  finds barycentric image \\(X^*\\) given multiple images \\(X_1,X_2,\\ldots,X_N\\).  Please note followings; (1) take matrix image please  make grayscale , (2) images size - resizing performed.","code":""},{"path":"https://kisungyou.com/T4transport/reference/image15B.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barycenter of Images according to Benamou et al. (2015) — image15B","text":"","code":"image15B(images, p = 2, weights = NULL, lambda = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/image15B.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barycenter of Images according to Benamou et al. (2015) — image15B","text":"images length-\\(N\\) list -size image matrices size \\((m\\times n)\\). p exponent order distance (default: 2). weights weight image; NULL (default), uniform weight set. Otherwise,  length-\\(N\\) vector nonnegative weights. lambda regularization parameter; NULL (default), paper's suggestion  taken, nonnegative real number. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). init.image initial weight image (default: uniform weight). maxiter maximum number iterations (default: 496). nthread number threads OpenMP run (default: 1). print.progress logical show current iteration (default: TRUE).","code":""},{"path":"https://kisungyou.com/T4transport/reference/image15B.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barycenter of Images according to Benamou et al. (2015) — image15B","text":"\\((m\\times n)\\) matrix barycentric image.","code":""},{"path":"https://kisungyou.com/T4transport/reference/image15B.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Barycenter of Images according to Benamou et al. (2015) — image15B","text":"Benamou J, Carlier G, Cuturi M, Nenna L, Peyré G (2015). “Iterative Bregman Projections Regularized Transportation Problems.” SIAM Journal Scientific Computing, 37(2), A1111--A1138. ISSN 1064-8275, 1095-7197, doi: 10.1137/141000439 .","code":""},{"path":[]},{"path":"https://kisungyou.com/T4transport/reference/image15B.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barycenter of Images according to Benamou et al. (2015) — image15B","text":"","code":"#---------------------------------------------------------------------- #                       MNIST Data with Digit 3 # # EXAMPLE 1 : Very Small  Example for CRAN; just showing how to use it! # EXAMPLE 2 : Medium-size Example for Evolution of Output #---------------------------------------------------------------------- # EXAMPLE 1 data(digit3) datsmall = digit3[1:2] outsmall = image15B(datsmall, maxiter=3)  if (FALSE) { # EXAMPLE 2 : Barycenter of 100 Images # RANDOMLY SELECT THE IMAGES data(digit3) dat2 = digit3[sample(1:2000, 100)]  # select 100 images  # RUN SEQUENTIALLY run05 = image15B(dat2, maxiter=5)                    # first 5 iterations run10 = image15B(dat2, maxiter=5,  init.image=run05) # run 5 more run50 = image15B(dat2, maxiter=40, init.image=run10) # run 40 more  # VISUALIZE opar <- par(no.readonly=TRUE) par(mfrow=c(2,3), pty=\"s\") image(dat2[[sample(100,1)]], axes=FALSE, main=\"a random image\") image(dat2[[sample(100,1)]], axes=FALSE, main=\"a random image\") image(dat2[[sample(100,1)]], axes=FALSE, main=\"a random image\") image(run05, axes=FALSE, main=\"barycenter after 05 iter\") image(run10, axes=FALSE, main=\"barycenter after 10 iter\") image(run50, axes=FALSE, main=\"barycenter after 50 iter\") par(opar) }"},{"path":"https://kisungyou.com/T4transport/reference/imagebary14C.html","id":null,"dir":"Reference","previous_headings":"","what":"Barycenter of Images according to Cuturi & Doucet (2014) — imagebary14C","title":"Barycenter of Images according to Cuturi & Doucet (2014) — imagebary14C","text":"Using entropic regularization Wasserstein barycenter computation, imagebary14C finds barycentric image \\(X^*\\) given multiple images \\(X_1,X_2,\\ldots,X_N\\). Please note followings; (1) take matrix image please make grayscale , (2) images size - resizing performed.","code":""},{"path":"https://kisungyou.com/T4transport/reference/imagebary14C.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barycenter of Images according to Cuturi & Doucet (2014) — imagebary14C","text":"","code":"imagebary14C(images, p = 2, weights = NULL, lambda = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/imagebary14C.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barycenter of Images according to Cuturi & Doucet (2014) — imagebary14C","text":"images length-\\(N\\) list -size image matrices size \\((m\\times n)\\). p exponent order distance (default: 2). weights weight image; NULL (default), uniform weight set. Otherwise, length-\\(N\\) vector nonnegative weights. lambda regularization parameter; NULL (default), paper's suggestion taken, nonnegative real number. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). init.image initial weight image (default: uniform weight). maxiter maximum number iterations (default: 496). nthread number threads OpenMP run (default: 1). print.progress logical show current iteration (default: TRUE).","code":""},{"path":"https://kisungyou.com/T4transport/reference/imagebary14C.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barycenter of Images according to Cuturi & Doucet (2014) — imagebary14C","text":"\\((m\\times n)\\) matrix barycentric image.","code":""},{"path":"https://kisungyou.com/T4transport/reference/imagebary14C.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Barycenter of Images according to Cuturi & Doucet (2014) — imagebary14C","text":"Cuturi M, Doucet (2014-06-22/2014-06-24). “Fast Computation Wasserstein Barycenters.” Xing EP, Jebara T (eds.), Proceedings 31st International Conference Machine Learning, volume 32 Proceedings Machine Learning Research, 685–693.","code":""},{"path":[]},{"path":"https://kisungyou.com/T4transport/reference/imagebary14C.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barycenter of Images according to Cuturi & Doucet (2014) — imagebary14C","text":"","code":"if (FALSE) { # \\dontrun{ #---------------------------------------------------------------------- #                       MNIST Data with Digit 3 # # EXAMPLE 1 : Very Small  Example for CRAN; just showing how to use it! # EXAMPLE 2 : Medium-size Example for Evolution of Output #---------------------------------------------------------------------- # EXAMPLE 1 data(digit3) datsmall = digit3[1:2] outsmall = imagebary14C(datsmall, maxiter=3)  # EXAMPLE 2 : Barycenter of 100 Images # RANDOMLY SELECT THE IMAGES data(digit3) dat2 = digit3[sample(1:2000, 100)]  # select 100 images  # RUN SEQUENTIALLY run10 = imagebary14C(dat2, maxiter=10)                   # first 10 iterations run20 = imagebary14C(dat2, maxiter=10, init.image=run10) # run 40 more run50 = imagebary14C(dat2, maxiter=30, init.image=run20) # run 50 more  # VISUALIZE opar <- par(no.readonly=TRUE) par(mfrow=c(2,3), pty=\"s\") image(dat2[[sample(100,1)]], axes=FALSE, main=\"a random image\") image(dat2[[sample(100,1)]], axes=FALSE, main=\"a random image\") image(dat2[[sample(100,1)]], axes=FALSE, main=\"a random image\") image(run10, axes=FALSE, main=\"barycenter after 10 iter\") image(run20, axes=FALSE, main=\"barycenter after 20 iter\") image(run50, axes=FALSE, main=\"barycenter after 50 iter\") par(opar) } # }"},{"path":"https://kisungyou.com/T4transport/reference/imagebary15B.html","id":null,"dir":"Reference","previous_headings":"","what":"Barycenter of Images according to Benamou et al. (2015) — imagebary15B","title":"Barycenter of Images according to Benamou et al. (2015) — imagebary15B","text":"Using entropic regularization Wasserstein barycenter computation, imagebary15B finds barycentric image \\(X^*\\) given multiple images \\(X_1,X_2,\\ldots,X_N\\). Please note followings; (1) take matrix image please make grayscale , (2) images size - resizing performed.","code":""},{"path":"https://kisungyou.com/T4transport/reference/imagebary15B.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barycenter of Images according to Benamou et al. (2015) — imagebary15B","text":"","code":"imagebary15B(images, p = 2, weights = NULL, lambda = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/imagebary15B.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barycenter of Images according to Benamou et al. (2015) — imagebary15B","text":"images length-\\(N\\) list -size image matrices size \\((m\\times n)\\). p exponent order distance (default: 2). weights weight image; NULL (default), uniform weight set. Otherwise, length-\\(N\\) vector nonnegative weights. lambda regularization parameter; NULL (default), paper's suggestion taken, nonnegative real number. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). init.image initial weight image (default: uniform weight). maxiter maximum number iterations (default: 496). nthread number threads OpenMP run (default: 1). print.progress logical show current iteration (default: TRUE).","code":""},{"path":"https://kisungyou.com/T4transport/reference/imagebary15B.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barycenter of Images according to Benamou et al. (2015) — imagebary15B","text":"\\((m\\times n)\\) matrix barycentric image.","code":""},{"path":"https://kisungyou.com/T4transport/reference/imagebary15B.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Barycenter of Images according to Benamou et al. (2015) — imagebary15B","text":"Benamou J, Carlier G, Cuturi M, Nenna L, Peyré G (2015). “Iterative Bregman Projections Regularized Transportation Problems.” SIAM Journal Scientific Computing, 37(2), A1111-A1138. ISSN 1064-8275, 1095-7197, doi:10.1137/141000439 .","code":""},{"path":[]},{"path":"https://kisungyou.com/T4transport/reference/imagebary15B.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barycenter of Images according to Benamou et al. (2015) — imagebary15B","text":"","code":"#---------------------------------------------------------------------- #                       MNIST Data with Digit 3 # # EXAMPLE 1 : Very Small  Example for CRAN; just showing how to use it! # EXAMPLE 2 : Medium-size Example for Evolution of Output #---------------------------------------------------------------------- # EXAMPLE 1 data(digit3) datsmall = digit3[1:2] outsmall = imagebary15B(datsmall, maxiter=3)  if (FALSE) { # \\dontrun{ # EXAMPLE 2 : Barycenter of 100 Images # RANDOMLY SELECT THE IMAGES data(digit3) dat2 = digit3[sample(1:2000, 100)]  # select 100 images  # RUN SEQUENTIALLY run05 = imagebary15B(dat2, maxiter=5)                    # first 5 iterations run10 = imagebary15B(dat2, maxiter=5,  init.image=run05) # run 5 more run50 = imagebary15B(dat2, maxiter=40, init.image=run10) # run 40 more  # VISUALIZE opar <- par(no.readonly=TRUE) par(mfrow=c(2,3), pty=\"s\") image(dat2[[sample(100,1)]], axes=FALSE, main=\"a random image\") image(dat2[[sample(100,1)]], axes=FALSE, main=\"a random image\") image(dat2[[sample(100,1)]], axes=FALSE, main=\"a random image\") image(run05, axes=FALSE, main=\"barycenter after 05 iter\") image(run10, axes=FALSE, main=\"barycenter after 10 iter\") image(run50, axes=FALSE, main=\"barycenter after 50 iter\") par(opar) } # }"},{"path":"https://kisungyou.com/T4transport/reference/imagemed22Y.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserstein Median of Images by You et al. (2022) — imagemed22Y","title":"Wasserstein Median of Images by You et al. (2022) — imagemed22Y","text":"Given multiple images \\(X_1,\\ldots,X_N\\), Wasserstein median order 2 computed. proposed method relies choice barycenter computation opt algorithm imagebary15B, uses entropic regularization barycenter computation. Please note followings; (1) take matrix image please make grayscale , (2) images size - resizing performed.","code":""},{"path":"https://kisungyou.com/T4transport/reference/imagemed22Y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserstein Median of Images by You et al. (2022) — imagemed22Y","text":"","code":"imagemed22Y(images, weights = NULL, lambda = NULL, ...)"},{"path":"https://kisungyou.com/T4transport/reference/imagemed22Y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserstein Median of Images by You et al. (2022) — imagemed22Y","text":"images length-\\(N\\) list -size image matrices size \\((m\\times n)\\). weights weight image; NULL (default), uniform weight set. Otherwise, length-\\(N\\) vector nonnegative weights. lambda regularization parameter; NULL (default), paper's suggestion taken, nonnegative real number. ... extra parameters including abstol stopping criterion iterations (default: 1e-8). init.image initial weight image (default: uniform weight). maxiter maximum number iterations (default: 496). nthread number threads OpenMP run (default: 1). print.progress logical show current iteration (default: TRUE).","code":""},{"path":"https://kisungyou.com/T4transport/reference/imagemed22Y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserstein Median of Images by You et al. (2022) — imagemed22Y","text":"\\((m\\times n)\\) matrix Wasserstein median image.","code":""},{"path":"https://kisungyou.com/T4transport/reference/imagemed22Y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserstein Median of Images by You et al. (2022) — imagemed22Y","text":"","code":"if (FALSE) { # \\dontrun{ #---------------------------------------------------------------------- #                       MNIST Data with Digit 3 # # EXAMPLE : Very Small Example for CRAN; just showing how to use it! #---------------------------------------------------------------------- # LOAD THE DATA data(digit3) datsmall = digit3[1:10]   # COMPUTE outsmall = imagemed22Y(datsmall, maxiter=5)  # VISUALIZE opar <- par(no.readonly=TRUE) par(mfrow=c(1,4), pty=\"s\") image(outsmall, xaxt='n', yaxt='n', main=\"Wasserstein Median\") image(datsmall[[3]], xaxt='n', yaxt='n', main=\"3rd image\") image(datsmall[[6]], xaxt='n', yaxt='n', main=\"6th image\") image(datsmall[[9]], xaxt='n', yaxt='n', main=\"9th image\") par(opar) } # }"},{"path":"https://kisungyou.com/T4transport/reference/ipot.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserstein Distance via Inexact Proximal Point Method — ipot","title":"Wasserstein Distance via Inexact Proximal Point Method — ipot","text":"Inexact Proximal Point Method (IPOT) offers computationally efficient approach approximating Wasserstein distance two empirical measures iteratively solving series regularized optimal transport problems. method replaces entropic regularization used Sinkhorn's algorithm proximal formulation avoids explicit use entropy, thereby mitigating numerical instabilities. Let \\(C := \\|X_m - Y_n\\|^p\\) cost matrix, \\(X_m\\) \\(Y_n\\) support points two discrete distributions \\(\\mu\\) \\(\\nu\\), respectively. IPOT algorithm solves sequence optimization problems: $$   \\Gamma^{(t+1)} = \\arg\\min_{\\Gamma \\\\Pi(\\mu, \\nu)} \\langle \\Gamma, C \\rangle + \\lambda D(\\Gamma \\| \\Gamma^{(t)}), $$ \\(\\lambda > 0\\) proximal regularization parameter \\(D(\\cdot \\| \\cdot)\\) Kullback–Leibler divergence. subproblem solved approximately using fixed number inner iterations, making method inexact. Unlike entropic methods, IPOT require \\(\\lambda \\rightarrow 0\\) convergence unregularized Wasserstein solution. therefore robust numerical precision issues, especially small regularization parameters, provides closer approximation true optimal transport cost fewer artifacts.","code":""},{"path":"https://kisungyou.com/T4transport/reference/ipot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserstein Distance via Inexact Proximal Point Method — ipot","text":"","code":"ipot(X, Y, p = 2, wx = NULL, wy = NULL, lambda = 1, ...)  ipotD(D, p = 2, wx = NULL, wy = NULL, lambda = 1, ...)"},{"path":"https://kisungyou.com/T4transport/reference/ipot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserstein Distance via Inexact Proximal Point Method — ipot","text":"X \\((M\\times P)\\) matrix row observations. Y \\((N\\times P)\\) matrix row observations. p exponent order distance (default: 2). wx length-\\(M\\) marginal density sums \\(1\\). NULL (default), uniform weight set. wy length-\\(N\\) marginal density sums \\(1\\). NULL (default), uniform weight set. lambda regularization parameter (default: 0.1). ... extra parameters including maxiter maximum number iterations (default: 496). abstol stopping criterion iterations (default: 1e-10). L small number inner loop iterations (default: 1). D \\((M\\times N)\\) distance matrix \\(d(x_m, y_n)\\) two sets observations.","code":""},{"path":"https://kisungyou.com/T4transport/reference/ipot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserstein Distance via Inexact Proximal Point Method — ipot","text":"named list containing distance \\(\\mathcal{W}_p\\) distance value plan \\((M\\times N)\\) nonnegative matrix optimal transport plan.","code":""},{"path":"https://kisungyou.com/T4transport/reference/ipot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Wasserstein Distance via Inexact Proximal Point Method — ipot","text":"Xie Y, Wang X, Wang R, Zha H (2020-07-22/2020-07-25). “Fast Proximal Point Method Computing Exact Wasserstein Distance.” Adams RP, Gogate V (eds.), Proceedings 35th Uncertainty Artificial Intelligence Conference, volume 115 Proceedings Machine Learning Research, 433–453.","code":""},{"path":"https://kisungyou.com/T4transport/reference/ipot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserstein Distance via Inexact Proximal Point Method — ipot","text":"","code":"# \\donttest{ #------------------------------------------------------------------- #  Wasserstein Distance between Samples from Two Bivariate Normal # # * class 1 : samples from Gaussian with mean=(-1, -1) # * class 2 : samples from Gaussian with mean=(+1, +1) #------------------------------------------------------------------- ## SMALL EXAMPLE set.seed(100) m = 20 n = 30 X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y  ## COMPARE WITH WASSERSTEIN  outw = wasserstein(X, Y) ipt1 = ipot(X, Y, lambda=1) ipt2 = ipot(X, Y, lambda=10)  ## VISUALIZE : SHOW THE PLAN AND DISTANCE pmw = paste0(\"Exact plan\\n dist=\",round(outw$distance,2)) pm1 = paste0(\"IPOT (lambda=1)\\n dist=\",round(ipt1$distance,2)) pm2 = paste0(\"IPOT (lambda=10)\\n dist=\",round(ipt2$distance,2))  opar <- par(no.readonly=TRUE) par(mfrow=c(1,3), pty=\"s\") image(outw$plan, axes=FALSE, main=pmw) image(ipt1$plan, axes=FALSE, main=pm1) image(ipt2$plan, axes=FALSE, main=pm2)  par(opar) # }"},{"path":"https://kisungyou.com/T4transport/reference/rbary23L.html","id":null,"dir":"Reference","previous_headings":"","what":"Free-Support Barycenter by von Lindheim (2023) — rbary23L","title":"Free-Support Barycenter by von Lindheim (2023) — rbary23L","text":"collection empirical measures \\(\\lbrace \\mu_k\\rbrace_{k=1}^K\\), function implements free-support barycenter algorithm introduced von Lindheim (2023) . algorithm takes first input marginal reference performs one-step update support. version implements `reference` algorithm \\(p=2\\).","code":""},{"path":"https://kisungyou.com/T4transport/reference/rbary23L.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Free-Support Barycenter by von Lindheim (2023) — rbary23L","text":"","code":"rbary23L(atoms, marginals = NULL, weights = NULL)"},{"path":"https://kisungyou.com/T4transport/reference/rbary23L.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Free-Support Barycenter by von Lindheim (2023) — rbary23L","text":"atoms length-\\(K\\) list element \\((N_k \\times P)\\) matrix atoms. marginals marginal distributions empirical measures; NULL (default), uniform weights set measures. Otherwise, length-\\(K\\) list element length-\\(N_i\\) vector nonnegative weights sum 1. weights weights individual measure; NULL (default), measure considered equally. Otherwise, length-\\(K\\) vector.","code":""},{"path":"https://kisungyou.com/T4transport/reference/rbary23L.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Free-Support Barycenter by von Lindheim (2023) — rbary23L","text":"list two elements: support \\((N_1 \\times P)\\) matrix barycenter support points (number atoms first empirical measure). weight length-\\(N_1\\) vector representing barycenter weights (copied first marginal).","code":""},{"path":"https://kisungyou.com/T4transport/reference/rbary23L.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Free-Support Barycenter by von Lindheim (2023) — rbary23L","text":"von Lindheim J (2023). “Simple Approximative Algorithms Free-Support Wasserstein Barycenters.” Computational Optimization Applications, 85(1), 213–246. ISSN 0926-6003, 1573-2894, doi:10.1007/s10589-023-00458-3 .","code":""},{"path":"https://kisungyou.com/T4transport/reference/rbary23L.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Free-Support Barycenter by von Lindheim (2023) — rbary23L","text":"","code":"# \\donttest{ #------------------------------------------------------------------- #     Free-Support Wasserstein Barycenter of Four Gaussians # # * class 1 : samples from Gaussian with mean=(-4, -4) # * class 2 : samples from Gaussian with mean=(+4, +4) # * class 3 : samples from Gaussian with mean=(+4, -4) # * class 4 : samples from Gaussian with mean=(-4, +4) # #  The barycenter is computed using the first measure as a reference. #  All measures have uniform weights. #  The barycenter function also considers uniform weights. #------------------------------------------------------------------- ## GENERATE DATA #  Empirical Measures set.seed(100) ndat = 100 dat1 = matrix(rnorm(ndat*2, mean=-4, sd=0.5),ncol=2) dat2 = matrix(rnorm(ndat*2, mean=+4, sd=0.5),ncol=2)  dat3 = cbind(rnorm(ndat, mean=+4, sd=0.5), rnorm(ndat, mean=-4, sd=0.5)) dat4 = cbind(rnorm(ndat, mean=-4, sd=0.5), rnorm(ndat, mean=+4, sd=0.5))  myatoms = list() myatoms[[1]] = dat1 myatoms[[2]] = dat2 myatoms[[3]] = dat3 myatoms[[4]] = dat4  ## COMPUTE fsbary = rbary23L(myatoms)  ## VISUALIZE #  aligned with CRAN convention opar <- par(no.readonly=TRUE)  #  plot the input measures plot(myatoms[[1]], col=\"gray90\", pch=19, cex=0.5, xlim=c(-6,6), ylim=c(-6,6), main=\"Input Measures\") points(myatoms[[2]], col=\"gray90\", pch=19, cex=0.5) points(myatoms[[3]], col=\"gray90\", pch=19, cex=0.5) points(myatoms[[4]], col=\"gray90\", pch=19, cex=0.5)  #  plot the barycenter points(fsbary$support, col=\"red\", pch=19, cex=1.5)  par(opar) # }"},{"path":"https://kisungyou.com/T4transport/reference/sinkhorn.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserstein Distance via Entropic Regularization and Sinkhorn Algorithm — sinkhorn","title":"Wasserstein Distance via Entropic Regularization and Sinkhorn Algorithm — sinkhorn","text":"alleviate computational burden solving exact optimal transport problem via linear programming, Cuturi (2013) introduced entropic regularization scheme yields smooth approximation Wasserstein distance. Let \\(C:=\\|X_m - Y_n\\|^p\\) cost matrix, \\(X_m\\) \\(Y_n\\) observations two distributions \\(\\mu\\) \\(nu\\). , regularized problem adds penalty term objective function: $$   W_{p,\\lambda}^p(\\mu, \\nu) = \\min_{\\Gamma \\\\Pi(\\mu, \\nu)} \\langle \\Gamma, C \\rangle + \\lambda \\sum_{m,n} \\Gamma_{m,n} \\log (\\Gamma_{m,n}), $$ \\(\\lambda > 0\\) regularization parameter \\(\\Gamma\\) denotes transport plan. \\(\\lambda \\rightarrow 0\\), regularized solution converges exact Wasserstein solution, small values \\(\\lambda\\) may cause numerical instability due underflow. cases, implementation halts error; users advised increase \\(\\lambda\\) maintain numerical stability.","code":""},{"path":"https://kisungyou.com/T4transport/reference/sinkhorn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserstein Distance via Entropic Regularization and Sinkhorn Algorithm — sinkhorn","text":"","code":"sinkhorn(X, Y, p = 2, wx = NULL, wy = NULL, lambda = 0.1, ...)  sinkhornD(D, p = 2, wx = NULL, wy = NULL, lambda = 0.1, ...)"},{"path":"https://kisungyou.com/T4transport/reference/sinkhorn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserstein Distance via Entropic Regularization and Sinkhorn Algorithm — sinkhorn","text":"X \\((M\\times P)\\) matrix row observations. Y \\((N\\times P)\\) matrix row observations. p exponent order distance (default: 2). wx length-\\(M\\) marginal density sums \\(1\\). NULL (default), uniform weight set. wy length-\\(N\\) marginal density sums \\(1\\). NULL (default), uniform weight set. lambda regularization parameter (default: 0.1). ... extra parameters including maxiter maximum number iterations (default: 496). abstol stopping criterion iterations (default: 1e-10). D \\((M\\times N)\\) distance matrix \\(d(x_m, y_n)\\) two sets observations.","code":""},{"path":"https://kisungyou.com/T4transport/reference/sinkhorn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserstein Distance via Entropic Regularization and Sinkhorn Algorithm — sinkhorn","text":"named list containing distance \\(\\mathcal{W}_p\\) distance value. plan \\((M\\times N)\\) nonnegative matrix optimal transport plan.","code":""},{"path":"https://kisungyou.com/T4transport/reference/sinkhorn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Wasserstein Distance via Entropic Regularization and Sinkhorn Algorithm — sinkhorn","text":"Cuturi M (2013). “Sinkhorn Distances: Lightspeed Computation Optimal Transport.” Burges CJ, Bottou L, Welling M, Ghahramani Z, Weinberger KQ (eds.), Advances Neural Information Processing Systems, volume 26.","code":""},{"path":"https://kisungyou.com/T4transport/reference/sinkhorn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserstein Distance via Entropic Regularization and Sinkhorn Algorithm — sinkhorn","text":"","code":"# \\donttest{ #------------------------------------------------------------------- #  Wasserstein Distance between Samples from Two Bivariate Normal # # * class 1 : samples from Gaussian with mean=(-1, -1) # * class 2 : samples from Gaussian with mean=(+1, +1) #------------------------------------------------------------------- ## SMALL EXAMPLE set.seed(100) m = 20 n = 10 X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y  ## COMPARE WITH WASSERSTEIN  outw = wasserstein(X, Y) skh1 = sinkhorn(X, Y, lambda=0.05) skh2 = sinkhorn(X, Y, lambda=0.25)  ## VISUALIZE : SHOW THE PLAN AND DISTANCE pm1 = paste0(\"Exact Wasserstein:\\n distance=\",round(outw$distance,2)) pm2 = paste0(\"Sinkhorn (lbd=0.05):\\n distance=\",round(skh1$distance,2)) pm5 = paste0(\"Sinkhorn (lbd=0.25):\\n distance=\",round(skh2$distance,2))  opar <- par(no.readonly=TRUE) par(mfrow=c(1,3), pty=\"s\") image(outw$plan, axes=FALSE, main=pm1) image(skh1$plan, axes=FALSE, main=pm2) image(skh2$plan, axes=FALSE, main=pm5)  par(opar) # }"},{"path":"https://kisungyou.com/T4transport/reference/swdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Sliced Wasserstein Distance — swdist","title":"Sliced Wasserstein Distance — swdist","text":"Sliced Wasserstein (SW) Distance popular alternative standard Wasserstein distance due computational efficiency top nice theoretical properties. \\(d\\)-dimensional probability measures \\(\\mu\\) \\(\\nu\\), SW distance defined $$\\mathcal{SW}_p (\\mu, \\nu) = \\left( \\int_{\\mathbb{S}^{d-1}} \\mathcal{W}_p^p ( \\langle \\theta, \\mu\\rangle, \\langle \\theta, \\nu \\rangle) d\\lambda (\\theta) \\right)^{1/p},$$ \\(\\mathbb{S}^{d-1}\\) \\((d-1)\\)-dimensional unit hypersphere \\(\\lambda\\) uniform distribution \\(\\mathbb{S}^{d-1}\\). Practically, computed via Monte Carlo integration.","code":""},{"path":"https://kisungyou.com/T4transport/reference/swdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sliced Wasserstein Distance — swdist","text":"","code":"swdist(X, Y, p = 2, ...)"},{"path":"https://kisungyou.com/T4transport/reference/swdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sliced Wasserstein Distance — swdist","text":"X \\((M\\times P)\\) matrix row observations. Y \\((N\\times P)\\) matrix row observations. p exponent order distance (default: 2). ... extra parameters including num_proj number Monte Carlo samples SW computation (default: 496).","code":""},{"path":"https://kisungyou.com/T4transport/reference/swdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sliced Wasserstein Distance — swdist","text":"named list containing distance \\(\\mathcal{SW}_p\\) distance value. projdist length-num_proj vector projected univariate distances.","code":""},{"path":"https://kisungyou.com/T4transport/reference/swdist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sliced Wasserstein Distance — swdist","text":"Rabin J, Peyré G, Delon J, Bernot M (2012). “Wasserstein Barycenter Application Texture Mixing.” Bruckstein , ter Haar Romeny BM, Bronstein , Bronstein MM (eds.), Scale Space Variational Methods Computer Vision, volume 6667, 435–446. Springer Berlin Heidelberg, Berlin, Heidelberg. ISBN 978-3-642-24784-2 978-3-642-24785-9, doi:10.1007/978-3-642-24785-9_37 .","code":""},{"path":"https://kisungyou.com/T4transport/reference/swdist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sliced Wasserstein Distance — swdist","text":"","code":"# \\donttest{ #------------------------------------------------------------------- #  Sliced-Wasserstein Distance between Two Bivariate Normal # # * class 1 : samples from Gaussian with mean=(-1, -1) # * class 2 : samples from Gaussian with mean=(+1, +1) #------------------------------------------------------------------- # SMALL EXAMPLE set.seed(100) m = 20 n = 30 X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y  # COMPUTE THE SLICED-WASSERSTEIN DISTANCE outsw <- swdist(X, Y, num_proj=100) #> Error in round(params$nproj): non-numeric argument to mathematical function  # VISUALIZE # prepare ingredients for plotting plot_x = 1:1000 plot_y = base::cumsum(outsw$projdist)/plot_x #> Error: object 'outsw' not found  # draw opar <- par(no.readonly=TRUE) plot(plot_x, plot_y, type=\"b\", cex=0.1, lwd=2,      xlab=\"number of MC samples\", ylab=\"distance\",      main=\"Effect of MC Sample Size\") #> Error: object 'plot_y' not found abline(h=outsw$distance, col=\"red\", lwd=2) #> Error: object 'outsw' not found legend(\"bottomright\", legend=\"SW Distance\",         col=\"red\", lwd=2) #> Error in (function (s, units = \"user\", cex = NULL, font = NULL, vfont = NULL,     ...) {    if (!is.null(vfont))         vfont <- c(typeface = pmatch(vfont[1L], Hershey$typeface),             fontindex = pmatch(vfont[2L], Hershey$fontindex))    .External.graphics(C_strWidth, as.graphicsAnnot(s), pmatch(units,         c(\"user\", \"figure\", \"inches\")), cex, font, vfont, ...)})(dots[[1L]][[1L]], cex = dots[[2L]][[1L]], font = dots[[3L]][[1L]],     units = \"user\"): plot.new has not been called yet par(opar) # }"},{"path":"https://kisungyou.com/T4transport/reference/wasserstein.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserstein Distance via Linear Programming — wasserstein","title":"Wasserstein Distance via Linear Programming — wasserstein","text":"Given two empirical measures $$\\mu = \\sum_{m=1}^M \\mu_m \\delta_{X_m}\\quad\\textrm{}\\quad \\nu = \\sum_{n=1}^N \\nu_n \\delta_{Y_n},$$ \\(p\\)-Wasserstein distance \\(p\\geq 1\\) posited following optimization problem $$   W_p^p(\\mu, \\nu) = \\min_{\\pi \\\\Pi(\\mu, \\nu)} \\sum_{m=1}^M \\sum_{n=1}^N \\pi_{mn} \\|X_m - Y_n\\|^p, $$ \\(\\Pi(\\mu, \\nu)\\) denotes set joint distributions (transport plans) marginals \\(\\mu\\) \\(\\nu\\). function solves problem linear programming, standard approach exact computation empirical Wasserstein distance. Please see section detailed description usage function.","code":""},{"path":"https://kisungyou.com/T4transport/reference/wasserstein.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserstein Distance via Linear Programming — wasserstein","text":"","code":"wasserstein(X, Y, p = 2, wx = NULL, wy = NULL)  wassersteinD(D, p = 2, wx = NULL, wy = NULL)"},{"path":"https://kisungyou.com/T4transport/reference/wasserstein.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserstein Distance via Linear Programming — wasserstein","text":"X \\((M\\times P)\\) matrix row observations. Y \\((N\\times P)\\) matrix row observations. p exponent order distance (default: 2). wx length-\\(M\\) marginal density sums \\(1\\). NULL (default), uniform weight set. wy length-\\(N\\) marginal density sums \\(1\\). NULL (default), uniform weight set. D \\((M\\times N)\\) distance matrix \\(d(x_m, y_n)\\) two sets observations.","code":""},{"path":"https://kisungyou.com/T4transport/reference/wasserstein.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserstein Distance via Linear Programming — wasserstein","text":"named list containing distance \\(\\mathcal{W}_p\\) distance value. plan \\((M\\times N)\\) nonnegative matrix optimal transport plan.","code":""},{"path":"https://kisungyou.com/T4transport/reference/wasserstein.html","id":"using-wasserstein-function","dir":"Reference","previous_headings":"","what":"Using wasserstein() function","title":"Wasserstein Distance via Linear Programming — wasserstein","text":"assume empirical measures defined Euclidean space \\(\\mathcal{X}=\\mathbb{R}^d\\), $$\\mu = \\sum_{m=1}^M \\mu_m \\delta_{X_m}\\quad\\textrm{}\\quad \\nu = \\sum_{n=1}^N \\nu_n \\delta_{Y_n}$$ distance metric used standard Euclidean norm \\(d(x,y) = \\|x-y\\|\\). , marginals \\((\\mu_1,\\mu_2,\\ldots,\\mu_M)\\) \\((\\nu_1,\\nu_2,\\ldots,\\nu_N)\\) correspond wx wy, respectively.","code":""},{"path":"https://kisungyou.com/T4transport/reference/wasserstein.html","id":"using-wassersteind-function","dir":"Reference","previous_headings":"","what":"Using wassersteinD() function","title":"Wasserstein Distance via Linear Programming — wasserstein","text":"distance measures underlying spaces one's interests, option users provide distance matrix D rather vectors, $$D := D_{M\\times N} = d(X_m, Y_n)$$ arbitrary distance metrics beyond \\(\\ell_2\\) norm.","code":""},{"path":"https://kisungyou.com/T4transport/reference/wasserstein.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Wasserstein Distance via Linear Programming — wasserstein","text":"Peyré G, Cuturi M (2019). “Computational Optimal Transport: Applications Data Science.” Foundations Trends® Machine Learning, 11(5-6), 355–607. ISSN 1935-8237, 1935-8245, doi:10.1561/2200000073 .","code":""},{"path":"https://kisungyou.com/T4transport/reference/wasserstein.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserstein Distance via Linear Programming — wasserstein","text":"","code":"#------------------------------------------------------------------- #  Wasserstein Distance between Samples from Two Bivariate Normal # # * class 1 : samples from Gaussian with mean=(-1, -1) # * class 2 : samples from Gaussian with mean=(+1, +1) #------------------------------------------------------------------- ## SMALL EXAMPLE m = 20 n = 20 X = matrix(rnorm(m*2, mean=-1),ncol=2) # m obs. for X Y = matrix(rnorm(n*2, mean=+1),ncol=2) # n obs. for Y  ## COMPUTE WITH DIFFERENT ORDERS out1 = wasserstein(X, Y, p=1) out2 = wasserstein(X, Y, p=2) out5 = wasserstein(X, Y, p=5)  ## VISUALIZE : SHOW THE PLAN AND DISTANCE pm1 = paste0(\"Order p=1\\n distance=\",round(out1$distance,2)) pm2 = paste0(\"Order p=2\\n distance=\",round(out2$distance,2)) pm5 = paste0(\"Order p=5\\n distance=\",round(out5$distance,2))  opar <- par(no.readonly=TRUE) par(mfrow=c(1,3), pty=\"s\") image(out1$plan, axes=FALSE, main=pm1) image(out2$plan, axes=FALSE, main=pm2) image(out5$plan, axes=FALSE, main=pm5)  par(opar)  if (FALSE) { # \\dontrun{ ## COMPARE WITH ANALYTIC RESULTS #  For two Gaussians with same covariance, their  #  2-Wasserstein distance is known so let's compare !  niter = 1000          # number of iterations vdist = rep(0,niter) for (i in 1:niter){   mm = sample(30:50, 1)   nn = sample(30:50, 1)      X = matrix(rnorm(mm*2, mean=-1),ncol=2)   Y = matrix(rnorm(nn*2, mean=+1),ncol=2)      vdist[i] = wasserstein(X, Y, p=2)$distance   if (i%%10 == 0){     print(paste0(\"iteration \",i,\"/\", niter,\" complete.\"))    } }  # Visualize opar <- par(no.readonly=TRUE) hist(vdist, main=\"Monte Carlo Simulation\") abline(v=sqrt(8), lwd=2, col=\"red\") par(opar) } # }"},{"path":"https://kisungyou.com/T4transport/news/index.html","id":"t4transport-013","dir":"Changelog","previous_headings":"","what":"T4transport 0.1.3","title":"T4transport 0.1.3","text":"Changed structure package. Applied log-sum-exp trick numerical stability. rbary23L() added simple free-support Wasserstein barycenter computation. Two ad hoc median routines images histograms removed.","code":""},{"path":"https://kisungyou.com/T4transport/news/index.html","id":"t4transport-012","dir":"Changelog","previous_headings":"","what":"T4transport 0.1.2","title":"T4transport 0.1.2","text":"CRAN release: 2023-04-11 gaussmed1d() gaussmedpd() now fully respects product manifold perspective. gwdist() added Sliced-Wasserstein distance computation.","code":""},{"path":"https://kisungyou.com/T4transport/news/index.html","id":"t4transport-011","dir":"Changelog","previous_headings":"","what":"T4transport 0.1.1","title":"T4transport 0.1.1","text":"CRAN release: 2022-09-03 Support special types data. See reference details.","code":""},{"path":"https://kisungyou.com/T4transport/news/index.html","id":"t4transport-010","dir":"Changelog","previous_headings":"","what":"T4transport 0.1.0","title":"T4transport 0.1.0","text":"CRAN release: 2020-10-09 Added NEWS.md file track changes package. Initial release.","code":""}]
